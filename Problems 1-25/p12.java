/*

https://projecteuler.net/problem=12

The sequence of triangle numbers is generated by adding the natural numbers. 
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

*/

import java.util.*;

public class p12 {

	public static void main(String[] args) {	
		

		int[] primes = new int[1000];

		int i, index;
		i = 2;
		index = 0;

		do {
			if (isPrime(i)) {
				primes[index] = i;
				index++;
			}

			i++;

		} while (index < primes.length);

		int sum, count, divisors;
		
		for (int j = 2; j <= 500000; j++) {

			sum = (j * (j + 1)) / 2;
			divisors = 1;

			for (int k = 0; k < primes.length && sum > 1; k++) {

				int temp, factor;
				count = 0;

				if (sum % primes[k] == 0) {

					temp = sum;
					factor = primes[k];
					
					while (temp % primes[k] == 0) {
						count++;
						//System.out.println(j + ": | sum: " + sum + " | factor: " + factor + " | prime: " + primes[k] + " | divisors: " + divisors + " | number of primes: " + primeCount);
						temp = temp / primes[k];
						factor = factor * primes[k];
					}

					divisors = (count + 1) * divisors;
				}
			}

			if (divisors >= 500) {
				System.out.println("n: " + sum + " | " + divisors);

				break;	
			}
		}
	}

	public static boolean isPrime(int n) {

		int limit = (int) Math.sqrt(n);

		for (int i = 2; i <= limit; i++) {

			if (i * i > n) {
				return n % i == 0;
			}
			else if (n % i == 0) {
				return false;
			}
			else {
				continue;
			}
		}

		return true;
	}
}
